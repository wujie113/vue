<template>
  <treeselect
					  :load-options="loadUserOrgs"
					  :options="orgusers" 
					  :auto-load-root-options="autoload"
            :value="value"
					  :multiple="multiple"  
            :disable-branch-nodes="true"
  					:show-count="false"
					  value-consists-of="LEAF_PRIORITY"
					  no-children-text="空记录"  retry-text="重试"  :value-format="format"
					  placeholder="选择用户..."
            @input="handleInput" 
					  />
</template> 
<script>
// import the component
import Treeselect from "@riophae/vue-treeselect";
// import the styles
import "@riophae/vue-treeselect/dist/vue-treeselect.css";
import { list, findOrgUsers } from "@/api/core/org";
export default {
  components: { Treeselect },
  name: "RmUserSelect",
  props: {
    value: {
      required: false
    },
    format: {
      required: false,
      type: String,
      default: "object"
    },
    multiple: {
      required: false,
      type: Boolean,
      default: false
    },
    autoload: {
      required: false,
      type: Boolean,
      default: true
    }
  },
  data() {
    return {
      orgusers: null
    };
  },
  computed: {},
  methods: {
    handleInput(value, instanceId) {
      console.log(JSON.stringify(value));
      this.$emit("input",  value);
    },
    handleDeselect(node, instanceId) {},
    handleSelect(node2, instanceId) {
      var str = JSON.stringify(node2);
      var node = JSON.parse(str);
      node.id = node.oid; //还原用户id
      delete node.oid;
      //console.log("user node2:", node);
      //支持v-model方式
      console.log("input :", JSON.stringify(this.value));
      if (this.multiple) {
        //this.value.push(node);
        this.$emit("input", this.value);
      } else {
        this.$emit("input", node);
      }
      //this.$emit('update:org',node)
    },
    loadUserOrgs({ action, parentNode, callback }) {
      //console.log(action, parentNode, this.org);
      var self = this;
      var pid = null;
      if (action != "LOAD_ROOT_OPTIONS") {
        pid = parentNode.oid;
      }
      findOrgUsers(pid)
        .then(response => {
          //console.log("response:::", response);
          const data = response.data;
          var olist = data.offices;
          var ulist = data.users;
          if (olist.length == 0) {
            if (pid) parentNode.children = undefined;
            //组织机构禁用
            parentNode.isDisabled = true;
            callback();
            return;
          }
          //子部门
          var orgs = [];
          for (var i in olist) {
            orgs.push({
              id: "o" + olist[i].id,
              oid: olist[i].id,
              name: olist[i].name,
              label: olist[i].name,
              children: null
            });
          }
          //部门用户
          for (var i in ulist) {
            orgs.push({
              id: "u" + ulist[i].id,
              oid: ulist[i].id,
              name: ulist[i].name,
              label: ulist[i].name,
              children: undefined
            });
          }
          if (pid) {
            parentNode.children = orgs;
          } else {
            self.orgusers = orgs;
          }
          callback();
        })
        .catch(error => {
          callback();
        });
    }
  }
};
</script>

<style scoped>
</style>
