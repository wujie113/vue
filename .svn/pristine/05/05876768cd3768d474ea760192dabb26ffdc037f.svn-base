<template>
  <treeselect
					  :load-options="loadOrgs"
					  :options="orgs" 
					  :auto-load-root-options="autoload"
            :value="value"
					  :multiple="multiple"  
					  no-children-text="空记录"  retry-text="重试"  :value-format="format"
					  placeholder="选择部门..."
             @select="handleSelect"
					  />
</template> 
<script>
// import the component
import Treeselect from "@riophae/vue-treeselect";
// import the styles
import "@riophae/vue-treeselect/dist/vue-treeselect.css";
import { list } from "@/api/core/org";
export default {
  components: { Treeselect },
  name: "RmOrgSelect",
  props: {
    value: {
      required: false
    },
    format: {
      required: false,
      type: String,
      default: "object"
    },
    multiple: {
      required: false,
      type: Boolean,
      default: false
    },
    autoload: {
      required: false,
      type: Boolean,
      default: false
    }
  },
  data() {
    return {
      orgs: null
    };
  },
  computed: {},
  methods: {
    handleSelect(node, instanceId) {
      //console.log("node:", node);
      //用事件的方式，方便支持自定义解析结果
      this.$emit("select", node);
      //支持v-model方式
      //  console.log("input :", JSON.stringify(this.value));
      if (this.multiple) {
        this.value.push(node);
        this.$emit("input", this.value);
      } else {
        this.$emit("input", node);
      }
      //this.$emit('update:org',node)
    },
    loadOrgs({ action, parentNode, callback }) {
      //console.log(action, parentNode, this.org);
      var self = this;
      var pid = null;
      if (action != "LOAD_ROOT_OPTIONS") {
        pid = parentNode.id;
      }
      list(pid)
        .then(response => {
          //console.log("response:::", response);
          const data = response.data;
          var list = data.list;
          if (list.length == 0) {
            if (pid) parentNode.children = undefined;
            callback();
            return;
          }
          var orgs = [];
          for (var i in list) {
            orgs.push({
              id: list[i].id,
              name: list[i].name,
              label: list[i].name,
              children: null
            });
            if (pid) {
              parentNode.children = orgs;
            } else {
              self.orgs = orgs;
            }
            callback();
          }
        })
        .catch(error => {
          callback();
        });
    }
  }
};
</script>

<style scoped>
</style>
